#version 130

#if __VERSION__ < 130
#define CBMAP texture2D
#else
#define CBMAP texture
#endif

uniform samplerCube map;
uniform samplerCube positionMap;
uniform int viewtype;
uniform highp mat4 transform;
uniform highp mat4 transformColor;
uniform highp mat4x3 tCam0;
uniform samplerCube positionMap0;
uniform highp mat4x3 tCam1;
uniform samplerCube positionMap1;
uniform highp mat4x3 tCam2;
uniform samplerCube positionMap2;
uniform int numOverlays;
uniform bool cropUnif;
uniform highp float fovUnif;
varying highp vec2 texCoordV;

//precision highp float;

//    VIEWTYPE_RENDERED = 0, VIEWTYPE_POSITION = 1, VIEWTYPE_DEPTH = 2, VIEWTYPE_FLOW = 3, VIEWTYPE_INDEX = 4


void main() {
    highp float len = length(texCoordV);
    if (cropUnif && len > fovUnif){discard;}
    highp float sin = sin(len);
    highp vec3 sphere;
    sphere.xy = texCoordV.xy * (sin / len);
    sphere.z = -cos(len);
    gl_FragColor = CBMAP(map, sphere);
    if (viewtype == 0)
    {
        if (numOverlays != 0)
        {
            highp vec4 pos = transform * vec4(sphere * CBMAP(positionMap, sphere).x,1);
            highp float lambda = 1.05;
            bool vis0;
            {
                highp vec3 posCam = tCam0 * pos;
                float distCam = CBMAP(positionMap0, posCam).x;
                vis0 = posCam.z < 0 && distCam * lambda > length(posCam);
                //gl_FragColor.x *= 0.5 + 0.5 * float(vis0);

            }
            if (numOverlays > 1)
            {
                {
                    highp vec3 posCam = tCam1 * pos;
                    float distCam = CBMAP(positionMap1, posCam).x;
                    bool vis1 = posCam.z < 0 && distCam * lambda > length(posCam);
                    if (vis0){if (vis1) {gl_FragColor.xyz *= vec3(1,0.94,0);}
                    else                {gl_FragColor.xyz *= vec3(0.63,0.678,0.937);}}
                    else     {if (vis1) {gl_FragColor.xyz *= vec3(0.541,0.776,0.251);}
                    else                {gl_FragColor.xyz *= vec3(1,1,1);}}
                    //gl_FragColor.y *= 0.5 + 0.5 * float((posCam).z > 0 && length(vis1);
                }
                if (numOverlays > 2)
                {
                    highp vec3 posCam = tCam2 * pos;
                    float distCam = CBMAP(positionMap2, posCam).x;
                    gl_FragColor.z *= 0.5 + 0.5 * float(posCam.z < 0 && distCam * lambda > length(posCam));
                }
            }
        }
    }
    else if (viewtype == 1)
    {
        gl_FragColor = transform * vec4(sphere.xyz * gl_FragColor.x,1);
    }
    else if (viewtype == 2)
    {
        gl_FragColor.xyzw = vec4(gl_FragColor.xxx, 1);
    }
    else if (viewtype == 3)
    {
        sphere.z = -sphere.z;
        highp mat2 tcn = mat2(texCoordV, vec2(-texCoordV.y, texCoordV.x));
        tcn /= len;
        highp vec2 ds = gl_FragColor.xy * tcn;
        ds.x = sin*gl_FragColor.z + ds.x * sphere.z;
        gl_FragColor.z = dot(sphere,gl_FragColor.xyz);
        gl_FragColor.xy = tcn * ds;
    }
    else if (viewtype == 4)
    {
        gl_FragColor.xyz = gl_FragColor.xxx;
    }
    gl_FragColor = transformColor * gl_FragColor;
};

//div = sqrt(c*c*xq*lenq + yq*sin*sin)
        /*(xq*cosc - xq*sin / len + len*sin)/div
        x*y*(cosc - sin / len)/div
        -c*x*sin/div*/

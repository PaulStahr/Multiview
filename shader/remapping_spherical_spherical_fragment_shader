#version 130

#if __VERSION__ < 130
#define TEXTURE2D texture2D
#else
#define TEXTURE2D texture
#endif

uniform sampler2D map;
uniform sampler2D positionMap;
uniform int viewtype;
uniform highp mat4 transform;
uniform highp mat4 transformColor;
uniform highp mat4x3 tCam0;
uniform sampler2D positionMap0;
uniform highp mat4x3 tCam1;
uniform sampler2D positionMap1;
uniform highp mat4x3 tCam2;
uniform sampler2D positionMap2;
uniform int numOverlays;
uniform bool cropUnif;
uniform highp float fovUnif;
in highp vec2 texCoordV;

//precision highp float;

//    VIEWTYPE_RENDERED = 0, VIEWTYPE_POSITION = 1, VIEWTYPE_DEPTH = 2, VIEWTYPE_FLOW = 3, VIEWTYPE_INDEX = 4

highp vec2 sp2eq(highp vec3 orig)
{
    highp float len = length(orig.xy);
    len = atan(len, -orig.z) / (len * fovUnif * 2.);
    return orig.xy * len + vec2(0.5);
}

void main() {
    highp float len = length(texCoordV);
    if (cropUnif && len > fovUnif){discard;}
    gl_FragColor = texture(map, texCoordV * (0.5 / fovUnif) + 0.5);
    highp vec3 sphere;
    highp float sin = sin(len);
    sphere.xy = texCoordV.xy * (sin / len);
    sphere.z = -cos(len);
    if (viewtype == 0)
    {
        if (numOverlays != 0)
        {
            highp vec4 pos = transform * vec4(sphere * texture(positionMap, texCoordV * (0.5 / fovUnif) + 0.5).x,1);
            highp float lambda = 1.05;
            {
                highp vec3 posCam = tCam0 * pos;
                float distCam = texture(positionMap0, sp2eq(posCam)).x;
                gl_FragColor.x *= 0.5 + 0.5 * float(posCam.z < 0 && distCam * lambda > length(posCam));
            }
            if (numOverlays > 1)
            {
                {
                    highp vec3 posCam = tCam1 * pos;
                    float distCam = texture(positionMap1, sp2eq(posCam)).x;
                    gl_FragColor.y *= 0.5 + 0.5 * float(posCam.z < 0 && distCam * lambda > length(posCam));
                }
            
                if (numOverlays > 2)
                {
                    highp vec3 posCam = tCam2 * pos;
                    float distCam = texture(positionMap2, sp2eq(posCam)).x;
                    gl_FragColor.z *= 0.5 + 0.5 * float(posCam.z < 0 && distCam * lambda > length(posCam));
                }
            }
        }
    }
    else if (viewtype == 1)
    {
        gl_FragColor = transform * vec4(sphere * gl_FragColor.x,1);
    }
    else if (viewtype == 2)
    {
        gl_FragColor.xyzw = vec4(gl_FragColor.xxx, 1);
    }
    else if (viewtype == 3)
    {
        sphere.z = -sphere.z;
        highp mat2 tcn = mat2(texCoordV, vec2(-texCoordV.y, texCoordV.x));
        tcn /= len;
        highp vec2 ds = gl_FragColor.xy * tcn;
        ds.x = ds.x * sphere.z + sin*gl_FragColor.z;
        gl_FragColor.z = dot(sphere,gl_FragColor.xyz);
        gl_FragColor.xy = tcn * ds;
    }
    gl_FragColor = transformColor * gl_FragColor;
};
